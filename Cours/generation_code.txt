Rappels :
    CO = PC -> R15
    LD = R14 -> Adresse de retour
    SP (Sommet de pile) -> R13
    "Frame Pointer" = registre de base ->R11
    Pile "Full descendante" : Le SP pointe sur le dernier octet occupé
    Branchement à une étiquette : BL F1
    LDMFD R13!,{PC} dépile l'@ de retour et la met dans le PC
    STMFD R13!,{R14} empile l'@ de retour

Accès aux variables :
    -> Locale | non Locale
    -> chemin statique

    On sait : 
        Dans la TDS : 
            - On a calculé 1 déplacement pour chaque variable
            - On a aussi dans la TDS : n° de région et n° d'imbrication

    On note #Depl le déplacement associé à la (variable|param) à effectuer à partir de la base (R11 est une @) d'un env

Retrouver une variable et la ranger dans R0 :
    MOV R0,R11
    ADD R0,R0,#Depl-4

Paramètre passé par adresse : 
    MOV R0,R11
    ADD R0,R0,#Depl+8
    LDR R1,[R0]

Accès à une variable non-Locale : 
    Cas peu d'imbrications :
        MOV R10,R11
        LDR R10,[R10,#-4]
        LDR R10,[R10,#-4]
        LDR R10,[R10,#-4]
        ...
        LDR R0,[R10,#-4]

    Sinon : 
        MOV R1,#(Nx-Ny)
    LOOP ADD R10,R10,#-4
        LDR R10,[R10]
        SUBS R1,R1,#1
        BNE LOOP
        LDR R0,[R10,#Depl-4]

Code pour les appels de fonctions et de procédure :

Appelé :
    Hypothèses :
        - Chemin statique dans l'env
        - Taille Locale = taille (en octets) de la zone des variables locales
        - R13 SP, R11 base, R10 contient le chemin statique à empiler
    
    Code INC.

    STMFD R13!,LR                                       //Empiler l'@ de retour
    STMFD SP!,R11                                       //Empiler ch. DYN
    MOV R11,R13                                         
    STMFD SP!,R10                                       //Empiler ch. statique (qui est dans R10)
    SUB R13,R13,#taille_locale                          //Réserver de la place pour les variables locales
    STMFD SP!,{#registre_a_save}                        //Sauvegarder les registres                        

    [PROGRAMME]

    LDMFD SP!,{#registre_a_save}                        //Restauration des registres
    ADD R13,R13,#taille_locale+4    ou MOV R13,R11      //Dépiler les variables locales + ch. statique
    LDR R11,[SP,#4]                 ou LDMFD R13!,R11   //Restaurer l'ancienne base
    LDR PC,[R13,#4]                 ou LDMFD R13!,{PC}  //Retour à l'appelant

    Traduction : 
    // Empiler l'adresse de retour et R11 (frame pointer actuel)
    STP LR, X11, [SP, #-16]!
    // Empiler ch. statique (qui est dans X10)
    STP X10, XZR, [SP, #-16]!  // XZR est un zéro registre, utilisé ici pour garder l'alignement

    // Réserver de la place pour les variables locales
    SUB SP, SP, taille_locale

    // [PROGRAMME] - Votre code ici

    // Libérer l'espace de variables locales et récupérer ch. statique
    ADD SP, SP, taille_locale
    LDP X10, XZR, [SP], #16

    // Restaurer l'adresse de retour et R11 (frame pointer)
    LDP LR, X11, [SP], #16

    // Retour à l'appelant
    RET



Appelant :
    //Calculer le ch. statique et le mettre dans R10
    //Empiler les paramètres effectifs
    //(OPTIONNEL)Réserver de la place pour la valeur de retour
    //Branche à l'appelé
    //(OPTIONNEL)Récupérer val retour
    //Dépiler les paramètres 

Information sur les registres (internet) :
Register	Volatility	Role
x0-x8	Volatile	Parameter/Result scratch registers
x9-x15	Volatile	Scratch registers
x16-x17	Volatile	Intra-procedure-call scratch registers
x18	N/A	Reserved platform register: in kernel mode, points to KPCR for the current processor; In user mode, points to TEB
x19-x28	Non-volatile	Scratch registers
x29/fp	Non-volatile	Frame pointer
x30/lr	Both	Link Register: Callee function must preserve it for its own return, but caller's value will be lost.

Pour executer un programme SUR LA RASPBERRY : 
    as -o hello.o hello.s
    ld -o hello hello.o
    ./hello
OU 
    gcc -o hello hello.s
    ./hello

Il semblerait que la rapberry pi soit en AArch64 (ARMv8)

Pour regarder les syscall : 
    cat /usr/include/asm-generic/unistd.h 
    Ou : https://arm64.syscall.sh/

Convention :
    ARCH	NR	RETURN	ARG0	ARG1	ARG2	ARG3	ARG4	ARG5
    arm64	x8	x0	    x0	    x1	    x2	    x3	    x4	    x5

Pour avoir une simulation : 
    http://163.238.35.161/~zhangs/arm64simulator/*
    Le site est douteux, mais je vais faire comme d'habitude et ignorer les problèmes

Debug en utilisant GDB : 
    Compiler le programme :
    gcc -g -o hello hello.s

    Pour debug :
    gdb // lance le debugger
    tui enable // lance le debugger mais en plus grand ??
    b 6 // Met un breakpoint à la ligne 6
    p $x0 // Affiche le registre x0
    layout asm // Lance le visionneur ASM 
    layout regs // Lance le visionneur de registres 
    bt // Affiche la pile (je sais pas comment il marche)
    run
    ni // Next Instruction